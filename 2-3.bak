#lang racket

(define (foo tree)
  (if (null? tree) (cons 0 0)
      (let ((tmpL (foo (cadr tree)))
            (tmpR (foo (caddr tree))))
        (let ((hL (car tmpL))
              (hR (car tmpR))
              (maxL (cdr tmpL))
              (maxR (cdr tmpR)))
          (let ((condL (= hL 0))
                (condR (= hR 0))
                (cur (car tree)))
            (cond ((or (< hL 0) (< hR 0)) (cons -1 0))
                  ((and condL condR) (cons 1 cur))
                  (condL (if (and (= hR 1) (< cur maxR))
                                (cons 2 maxR)
                                (cons -1 0)))
                  (condR (if (and (= hL 1) (< maxL cur))
                                (cons 2 cur)
                                (cons -1 0)))
                  (else (if (and (< cur maxR)
                                 (< maxL cur)
                                 (<= (abs (- hL hR)) 1))
                            (cons (+ (max hL hR) 1) maxR)
                            (cons -1 0)))))))))

(define (fun2-2 tree)
  (if (< (car (foo tree)) 0)
      #f #t))